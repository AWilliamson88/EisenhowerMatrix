@page "/database"

<PageTitle>Eisenhower Matrix - Database</PageTitle>

@using DataModels.Models
@using EisenhowerMatrix.Components
@using UIServices
@inject IUIDatabaseService CRUDService

<h1 class="text-center text-decoration-underline todo-title">Eisenhower Matrix - Database</h1>
<p class="text-center">Saved to an Entity Framework sql server, via an api.</p>
<hr />

<pannel class="row">
	@if (Lists.Count > 0)
	{
		@foreach (var list in Lists)
		{
			<card class="card mylist col-12 col-md-6 my-2">
				<h3 class="text-center list-header py-3">@list.Title.ToUpper()</h3>

				@if (Lists != null && Lists.Count > 0)
				{
					currentList = list;
					<ProgressBar List="@list"></ProgressBar>
				}

				<EditForm class="form-inline my-2" Model="@newItem">
					<div class="row me-0">
						<div class="col-10">
							<InputTextArea class="form-control col-10" placeholder="New Task..." @bind-Value="newItem.Title" />
						</div>
						<button class="btn btn-outline-primary float-end col-2" type="submit"
						@onclick="(() => AddItems(list))">
							<span class="add-item fw-bold">Add Item</span>
							<i class="add-symbol fa fa-plus fw-bold"></i>
						</button>
					</div>
				</EditForm>

				<ul class="list-group">
					@foreach (var item in list.EMListItems)
					{
						<li class="list-group-item my-1">


							<span @onclick="(() => UpdateItem(item))">
								<EditForm class="form-check-inline pe-1" Model="@item">
									<InputCheckbox class="form-check"
									   @bind-Value="item.IsComplete" />
								</EditForm>
								<span class="position-absolute">
									@if (item.IsComplete)
									{
										<del class="text-muted">@item.Title</del>
									}
									else
									{
										@item.Title
									}
								</span>
							</span>
								<button class="btn btn-outline-danger float-end item-button fw-bold" type="button"
							@onclick="(() => Delete(list, item))">
									<i class="fa fa-trash"></i>
									<span class="item-button-text">Delete</span>
								</button>

							<EditModal CurrentItem="@item" SaveChanges="UpdateItemData"></EditModal>

							@if (item.Description.Length > 0)
							{
								<div class="border-top pt-2">
									<p class="ms-3 mb-0 text-muted">Description:</p>
									<ul class="list-group">
										<li class="list-group-item">@item.Description</li>
									</ul>
								</div>
							}
						</li>
					}
				</ul>
			</card>
		}
	}
	else
	{
		<p>Loading....</p>
	}
</pannel>

@code {

	private List<EMList> Lists = new List<EMList>();
	private EMList currentList = new EMList();
	private EMListItem newItem = new EMListItem();

	protected override async Task OnInitializedAsync()
	{
		await GetLists();
	}

	private async Task GetLists()
	{
		Lists = await CRUDService.GetLists();
	}

	private void AddItems(EMList list)
	{
		list.EMListItems.Add(newItem);
		CRUDService.AddItems(list.EMListId, list.EMListItems);
		newItem = new EMListItem();
	}

	public void UpdateItem(EMListItem item)
	{
		item.IsComplete = !item.IsComplete;
		CRUDService.UpdateItem(item);
	}

	private void UpdateItemData(EMListItem item)
	{
		CRUDService.UpdateItem(item);
	}

	private void Delete(EMList list, EMListItem item)
	{
		CRUDService.Delete(list.EMListId, item.EMListItemId);
		list.EMListItems.Remove(item);
	}

}
