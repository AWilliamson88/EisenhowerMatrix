@page "/localstorage"

<PageTitle>Eisenhower Matrix - Local</PageTitle>

@using DataModels.Models
@using EisenhowerMatrix.Components
@using UIServices
@inject LocalStorageService Storage
@inject DefaultDataService Default

<h1 class="text-center">Eisenhower Matrix - Local</h1>
<p class="text-center">Saved in your local storage.</p>
<hr />

@if (Lists.Count > 0)
{
	<div class="container">
		<div class="row justify-content-around">
			@foreach (var list in Lists)
			{
				<div class="col col-5">
					<div class="list-group mb-4">
						<div class="d-flex w-100
						justify-content-between
						list-group-item
						active">
							<h5 class="mb-1">@list.Title</h5>
							<small>@list.EMListItems.Count @(list.EMListItems.Count == 1 ? "task" : "tasks")</small>
						</div>

						@foreach (EMListItem item in list.EMListItems)
						{
							<EditForm class="form-inline" Model="item">
								<label class="list-group-item">
									<input type="checkbox" class="form-check-input me-2"
							   checked="@item.IsComplete" @onchange="e => UpdateItem(item)" />
									@if (item.IsComplete)
									{
										<del class="text-muted">@item.Title</del>
									}
									else
									{
										@item.Title
									}
									<button class="btn btn-outline-danger float-end item-button fw-bold" type="button"
								@onclick="(() => Delete(list, item))">
										<i class="fa fa-trash"></i>
										<span class="item-button-text">Delete</span>
									</button>
								</label>
							</EditForm>

						}
						<EditForm class="form-inline list-group-item d-initial" Model="@newItem">
							<InputText placeholder="New Task..." @bind-Value="newItem.Title" />
							<button class="btn btn-outline-primary float-end item-button fw-bold" type="submit"
							@onclick="(() => AddItems(list))">
								<i class="fa fa-plus"></i>
								<span class="item-button">Add Item</span>
							</button>
						</EditForm>
					</div>
				</div>
			}
		</div>
	</div>
}
else {
	<p>Loading...</p>
}

@code {
	private List<EMList> Lists = new List<EMList>();
	//private EMList currentList = new EMList();
	private EMListItem newItem = new EMListItem();
	const string MatrixKey = "tdMatrixKey";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await GetLists();
			StateHasChanged();
		}
	}

	private async Task SetList()
	{
		string listString = System.Text.Json.JsonSerializer.Serialize(Lists);
		await Storage.SetLocalStorage(MatrixKey, listString);
	}

	private async Task GetLists()
	{
		string stringList = await Storage.GetFromLocalStorage(MatrixKey);

		if (stringList != null && stringList != "[]")
		{
			List<EMList> newList = System.Text.Json.JsonSerializer.Deserialize<List<EMList>>(stringList);
			Lists = newList != null ? newList : Lists;
		}
		else
		{
			Lists = await Default.GetDefaultData();
		}
	}

	private async Task AddItems(EMList list)
	{
		list.EMListItems.Add(newItem);
		newItem = new EMListItem();
		await SetList();
	}

	public async Task UpdateItem(EMListItem item)
	{
		item.IsComplete = !item.IsComplete;
		await SetList();
	}

	private async Task UpdateItemData()
	{
		await SetList();
	}

	private async Task Delete(EMList list, EMListItem item)
	{
		list.EMListItems.Remove(item);
		await SetList();
	}

}
